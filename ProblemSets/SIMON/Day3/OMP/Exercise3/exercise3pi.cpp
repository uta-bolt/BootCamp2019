#include <iostream>
#include <random>
#include <vector>
#include <omp.h>
using namespace std;
int main()
{
    double x,y,r,z,pi;
    int incirc, numincirc, num_draws,numincirc_thread;
    //cout << "set number of draws";
    //cin >> num_draws;
    r=2.0;
    default_random_engine gen;
    uniform_real_distribution<double> dis(-r, r);
    numincirc=0;
    numincirc_thread=0;
    int mc_draw[]= { 100, 1000, 10000};
    for (int num_draws : mc_draw){

      #pragma omp parallel firstprivate(numincirc_thread)
      {
        #pragma omp for
          for (int n = 0; n < num_draws; ++n)
          {
          // Use dis to transform the random unsigned int generated by gen into a
          // double in [1, 2). Each call to dis(gen) generates a new random double
          x= dis(gen);
          y= dis(gen);
          z=x*x + y*y;
              if (z<r*r){
              ++numincirc_thread;
              }
          }
        #pragma omp critical
          {
            numincirc+=numincirc_thread;
          }

    }
      pi=4.0*((double)numincirc/(double)num_draws);
      cout << "Approximation of pi" << pi << endl;
    }

    return 0;
}
